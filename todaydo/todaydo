#!/bin/bash
# todaydo

prog_name="todaydo";
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd)";

# initialize switches for valid arguments
# arg switches {{{
# print help info
show_help=0;
# print info while running
verbose=0;
# open once running is finished
open_fin=0;
# add a new item to file
add_item=0;
# prompt for items to add
prompt=0;
# dry run
dry=0;
# dry run with dummy file
dummy=0;
# list items
list=0;
# cat file
fcat=0;
# create today if no exist
create=0;
# check off item
cross=0;
# uncheck item
uncross=0;
# edit item
edit=0;
# add subitem
add_sub_item=0;
# define date to operate on
day_change=0;
# permenently operate on different day (set env var)
time_machine=0;
# turn off time machine
time_machine_off=0;
# copy unfinished tasks from date to today
unfinished=0;
# copy all unfinished
all_unfinished=0;
# }}}

valid_args_passed=();

function show_help() { # {{{
	echo -ne "\
$prog_name
This program is used to create and manage to do lists for daily tasks.

Arguments:
-a | --append [item]            Adds a new item to the todo list.
-c | --concatenate              Displays the entire today file using the cat command.
-d | --dry-run                  Runs the program without create any files or \
directories.
-E | --edit [number] [descript] Allows user to redefine the description for \
the given number's corresponding item.
-f | --create                   Creates the daily file when it does not exist.
-h | --help                     Displays help information. (this message)
-i | --copy-unfinished [yyyyMMdd] Copies the unfinished tasks from the given \
date to the current todo list.
-I | --copy-all-unfinished        Copies ALL unfinished tasks from dates prior \
to current into the current todo list.
-l | --list                     Lists the todo contents of today's file. \
(runs after append)
-N | --day-change [yyyyMMdd]    Runs program for the given day.
-o | --open-file                Opens the file in your editor ($EDITOR) when \
running is complete.
-p | --prompt                   Uses prompt interface. (Command: todaydoprompt)
-s | --subitem [number] [item]  Adds a subitem to the given number's \
corresponding item.
-t | --time-machine [yyyyMMdd]  Stores date in todaydo_time_warp.txt and \
continues to run for the set day until specified.
-T | --time-machine-off         Empties the file todaydo_time_warp.txt.
-u | --uncross [number]         Uncrosses the given number's corresponding \
item from the list.
-v | --verbose                  Displays information as program runs.
-x | --cross [number]           Crosses the given number's corresponding item \
off of the list.
-y | --dummy                    Runs the program as dry and also ignore's the \
existing file.
";
	exit;
} # }}}

# add item variables {{{
get_item_value=0;
items_to_add=();
# }}}
# sub item init variables {{{
get_sub_item_num=0;
get_sub_item_value=0;
sub_items_to_add=();
sub_items_add_to=();
# }}}
# cross item variables {{{
get_cross_num=0;
items_to_cross=();
# }}}
# uncross item variables {{{
get_uncross_num=0;
items_to_uncross=();
# }}}
# edit item variables {{{
get_edit_num=0;
get_edit_val=0;
items_to_edit=();
items_edit_to=();
# }}}
# day change variables {{{
get_changed_day=0;
changed_day="";
# }}}
# time machine variables {{{
get_time_machine=0;
time_warp_to="";
# }}}
# unfinished variables {{{
unfinished_to_copy=();
get_unfinished=0;
# }}}

# checks arguments to make sure they are valid and adjusts the corresponding
# switch
function check_arg() { # {{{
	arg="$1";
	if [[ $get_item_value == 1 ]]
	then
		get_item_value=0;
		items_to_add+=("${arg}");
	elif [[ $get_cross_num == 1 ]]
	then
		get_cross_num=0;
		items_to_cross+=("${arg}");
	elif [[ $get_uncross_num == 1 ]]
	then
		get_uncross_num=0;
		items_to_uncross+=("${arg}");
	elif [[ $get_sub_item_num == 1 ]]
	then
		get_sub_item_num=0;
		sub_items_add_to+=("${arg}");
		get_sub_item_value=1;
	elif [[ $get_sub_item_value == 1 ]]
	then
		get_sub_item_value=0;
		sub_items_to_add+=("${arg}");
	elif [[ $get_edit_num == 1 ]]
	then
		get_edit_num=0;
		get_edit_val=1;
		items_to_edit+=("${arg}");
	elif [[ $get_edit_val == 1 ]]
	then
		get_edit_val=0;
		items_edit_to+=("${arg}");
	elif [[ $get_changed_day == 1 ]]
	then
		get_changed_day=0;
		changed_day="${arg}";
	elif [[ $get_time_machine == 1 ]]
	then
		get_time_machine=0;
		time_warp_to="${arg}";
	elif [[ $get_unfinished == 1 ]]
	then
		get_unfinished=0;
		unfinished_to_copy+=("${arg}");
	else
		if [[ $arg == "-v" ]] || [[ $arg == "--verbose" ]]
		then
			if [[ $verbose == 0 ]]
			then
				valid_args_passed+=("$arg");
f		fi
			verbose=1;
		elif [[ $arg == "-o" ]] || [[ $arg == "--open-file" ]]
		then
			if [[ $open_fin == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			open_fin=1;
		elif [[ $arg == "-a" ]] || [[ $arg == "--append" ]]
		then
			if [[ $add_item == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			add_item=1;
			get_item_value=1;
		elif [[ $arg == "-p" ]] || [[ $arg == "--prompt" ]]
		then
			if [[ $prompt == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			prompt=1;
		elif [[ $arg == "-s" ]] || [[ $arg == "--subitem" ]]
		then
			if [[ $add_sub_item == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			add_sub_item=1;
			get_sub_item_num=1;
		elif [[ $arg == "-d" ]] || [[ $arg == "--dry-run" ]]
		then
			if [[ $dry == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			dry=1;
		elif [[ $arg == "-l" ]] || [[ $arg == "--list" ]]
		then
			if [[ $list == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			list=1;
		elif [[ $arg == "-c" ]] || [[ $arg == "--concatentate" ]]
		then
			if [[ $cat == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			fcat=1;
		elif [[ $arg == "-y" ]] || [[ $arg == "--dummy" ]]
		then
			if [[ $dummy == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			dummy=1;
			dry=1;
		elif [[ $arg == "-f" ]] || [[ $arg == "--force-create" ]]
		then
			if [[ $create == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			create=1;
		elif [[ $arg == "-h" ]] || [[ $arg == "--help" ]]
		then
			show_help=1;
		elif [[ $arg == "-x" ]] || [[ $arg == "--cross" ]]
		then
			if [[ $cross == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			cross=1;
			get_cross_num=1;
		elif [[ $arg == "-u" ]] || [[ $arg == "--uncross" ]]
		then
			if [[ $uncross == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			uncross=1;
			get_uncross_num=1;
		elif [[ $arg == "-E" ]] || [[ $arg == "--edit" ]]
		then
			if [[ $edit == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			edit=1;
			get_edit_num=1;
		elif [[ $arg == "-N" ]] || [[ $arg == "--day-change" ]]
		then
			if [[ $day_change == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			day_change=1;
			get_changed_day=1;
		elif [[ $arg == "-t" ]] || [[ $arg == "--time-machine" ]]
		then
			if [[ $time_machine == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			time_machine=1;
			get_time_machine=1;
		elif [[ $arg == "-T" ]] || [[ $arg == "--time-machine-off" ]]
		then
			if [[ $time_machine_off ]]
			then
				valid_args_passed+=("$arg");
			fi
			time_machine_off=1;
		elif [[ $arg == "-i" ]] || [[ $arg == "--copy-unfinished" ]]
		then
			if [[ $unfinished == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			unfinished=1;
			get_unfinished=1;
		elif [[ $arg == "-I" ]] || [[ $arg == "--copy-all-unfinished" ]]
		then
			if [[ $all_unfinished == 0 ]]
			then
				valid_args_passed+=("$arg");
			fi
			all_unfinished=1;
		else
			echo -ne "Invalid argument: $arg.\n";
			echo -ne "USAGE:\n";
			show_help;
			exit;
		fi
	fi
} # }}}

# iterate through args and set switches
args="$(argbreaker "$@")";
for arg in ${args[@]}
do
	check_arg "$split_args";
done # }}}

# if $show_help, then show help
if [[ $show_help == 1 ]] # {{{
then
	show_help
	exit;
fi # }}}

# if $prompt, then run todaydoprompt
if [[ $prompt == 1 ]] # {{{
then
	todaydoprompt;
	exit;
fi # }}}

# if $verbose, print prog name and flipped switches
if [[ $verbose == 1 ]] # {{{
then
	echo -ne "\
$prog_name
args: [${valid_args_passed[@]}]
";
fi # }}}

file_dir=$HOME/todos;

# check if file dir exists
# if not, check $create
# if $create, create dir
# if not $create, exit
if [ ! -d $file_dir ] && [[ $create == 1 ]] && [[ $dummy == 0 ]] # {{{
then
	verbose_ne_print $verbose "$file_dir directory does not exist, creating...";
	if [[ $dry == 0 ]]
	then
		mkdir $HOME/todos &&
			verbose_ne_print $verbose "created.\n";
	else
		verbose_ne_print $verbose "dry run, not created.\n";
	fi
elif [ ! -d $file_dir ] && [[ $create == 0 ]] && [[ $dummy == 0 ]]
then
	echo -ne "The directory $HOME/todos does not exist.\n";
	echo -ne "To force creation. include -f switch.\n";
	exit;
elif [[ $dummy == 1 ]]
then
	verbose_ne_print $verbose "dummy run, ignoring directory check.\n";
fi # }}}

time_warp_file=$script_dir/todaydo_time_warp.txt;

# if time warp file does not exist, create
if [[ ! -f $time_warp_file ]] # {{{
then
	touch $time_warp_file;
fi # }}}

# empty $time_warp_file if $time_machine_off
if [[ $time_machine_off == 1 ]] # {{{
then
	echo -ne "" > $time_warp_file;
fi # }}}

# store date in $time_warp_file if $time_machine
if [[ $time_machine == 1 ]] # {{{
then
	echo -ne $time_warp_to > $time_warp_file;
fi # }}}

d=""
time_warp_from_file="$(cat $time_warp_file)";

# set date if $time_warp_from_file is not empty
if [[ ! -z "$time_warp_from_file" ]] # {{{
then
	d=$time_warp_from_file;
	time_machine=1;
	echo -ne "Time machine: ON. Warping to $time_warp_from_file\n"
else
	d=$(yyyy_mm_dd);
fi
# }}}

# if $day_change
if [[ $day_change == 1 ]] # {{{
then
	d=$changed_day;
fi # }}}

file=$file_dir/$d.md;
file_did_not_exist=0;

file_did_not_exist=0;
text_to_write="";

# check if today's file exists
# if not, check $create
# if $create, create file
# if not $create, exit
if [ ! -f $file ] && [[ $create == 1 ]] && [[ $dummy == 0 ]] # {{{
then
	file_did_not_exist=1;
	verbose_ne_print $verbose "$file file does not exist, creating...";
	dry_touch_file $dry $file &&
		verbose_ne_print $verbose "created.\n";
elif [ ! -f $file ] && [[ $create == 0 ]] && [[ $dummy == 0 ]]
then
	echo -ne "Today's file does not exist.\n";
	echo -ne "To force creation. include -f switch.\n";
	exit;
elif [[ $dummy == 1 ]]
then
	file_did_not_exist=1;
	verbose_ne_print $verbose "dummy run, ignoring file check.\n";
fi # }}}

# if file was just created, append header to text
if [[ $file_did_not_exist == 1 ]] # {{{
then
	text_to_write+="# $d Todo\n_ _ _";
else
	text_to_write+="$(cat $file)";
fi # }}}

# get unfinished items from file
function get_unfin_from_file() { # {{{
	contents="$(cat $1)";
	unfin_delim="$(get_unfinished_from_list "$contents")";
	echo -ne "$unfin_delim";
} # }}}

# get all items from file
function get_all_from_file() { # {{{
	contents="$(cat $1)";
	all_delim="$(get_all_from_list "$contents")";
	echo -ne "$all_delim";
} # }}}

# if $add_item, append items as list to text
if [[ $add_item == 1 ]] # {{{
then
	file_contents="$(cat $file)";
	last_num="$(last_num_from_list "$file_contents")";
	i=$(($last_num + 0));
	for item in "${items_to_add[@]}"
	do
		i=$((i + 1));
		text_to_write+=$(create_unfinished_list_item $i "$item");
	done
fi # }}}

all_arr=();
unfinished_array=();

# if $unfinished, append items from $unfinished_to_copy
if [[ $unfinished == 1 ]] # {{{
then
	file_contents="$(cat $file)";
	last_num=$(last_num_from_list "$text_to_write");
	for prev_date in "${unfinished_to_copy[@]}"
	do
		old_file=$file_dir/$prev_date.md;
		if [[ -f $old_file ]]
		then
			unfin_delim="$(get_unfin_from_file "$old_file")";
			IFS=',' read -ra unfin_arr <<< "$unfin_delim";
			for item in "${unfin_arr[@]}"
			do
				add_it=1;
				IFS=',' \
					read -ra current_array \
					<<< "$(get_all_from_list "$text_to_write")";
				for existing_item in "${current_array[@]}"
				do
					if [[ "$item" == "$existing_item" ]]
					then
						add_it=0;
						break;
					fi
				done
				if [[ $add_it == 1 ]]
				then
					last_num=$((last_num + 1));
					text_to_write+=$(create_unfinished_list_item $last_num "$item");
				fi
			done
		else
			echo -ne "File $old_file not found.\n";
			exit;
		fi
	done
fi # }}}

# if $all_unfinished, gather and append all unfinished items
if [[ $all_unfinished == 1 ]] # {{{
then
	s=20200101;
	e=$d;
	# get highest number from current file
	last_num=$(last_num_from_list "$text_to_write");
	for (( c=$s; c<$e; c++ ))
	do
		# get content of past file
		past_file=$file_dir/$c.md;
		if [[ -f $past_file ]]
		then
			all_delim="$(get_all_from_file "$past_file")";
			IFS=',' read -ra all_items <<< "$all_delim";
			for item in "${all_items[@]}"
			do
				all_arr+=("$item");
			done
			unfin_delim="$(get_unfin_from_file "$past_file")";
			IFS=',' read -ra unfin_arr <<< "$unfin_delim";
			for item in "${unfin_arr[@]}"
			do
				unfinished_array+=("$item");
			done
		fi
	done
fi # }}}

# cross off item function
function cross_off() { # {{{
	echo -ne "$2" | perl -ne "s/(?<=^$1\.\s)\[\s\]/\[x\]/g; print;"
} # }}}

# cross off items
if [[ $cross == 1 ]] # {{{
then
	for num in "${items_to_cross[@]}"
	do
		text_to_write=$(cross_off "$num" "$text_to_write");
	done
fi # }}}

# uncross item function
function uncross_off() { # {{{
	echo -ne "$2" | perl -ne "s/(?<=^$1\.\s)\[x\]/\[ \]/g; print;"
} # }}}

# uncross items
if [[ $uncross == 1 ]] # {{{
then
	for num in "${items_to_uncross[@]}"
	do
		text_to_write=$(uncross_off "$num" "$text_to_write");
	done
fi # }}}

# sub items function
function sub_item() { # {{{
	line=$(echo -ne "$3" | grep "^$1\.\s")
	echo "$line";
} # }}}

# add sub items
if [[ $add_sub_item == 1 ]] && [[ $dry == 0 ]] && [[ $dummy == 0 ]] # {{{
then
	i=0;
	while [[ i -lt ${#sub_items_to_add[@]} ]]
	do
		num=${sub_items_add_to[i]};
		item=${sub_items_to_add[i]};
		file_contents="$(cat $file)";
		sub_item "$num" "$item" "$file_contents";
		i=$((i + 1));
	done
elif [[ $add_sub_item == 1 ]]
then
	echo "nothing yet"
fi # }}}

# edit entries
if [[ $edit == 1 ]] # {{{
then
	i=0;
	while [[ $i -lt ${#items_to_edit[@]} ]]
	do
		num=${items_to_edit[i]};
		item=${items_edit_to[i]};
		text_to_write=$(replace_list_item "$num" "$item" "$text_to_write");
		text_to_write="$text_to_write";
		i=$((i + 1));
	done
fi # }}}

# check $text_to_write
# if not blank, append to file
if [[ ! -z $text_to_write ]] # {{{
then
	verbose_ne_print $verbose "appending text to file...";
	dry_write_file $dry $file "$text_to_write" &&
		verbose_ne_print $verbose "appended.\n";
fi # }}}

# if $fcat, not $dummy, not $dry, cat $file
# if $fcat, $dummy or $dry, print $text_to_write
if [[ $fcat == 1 ]] && [[ $dummy == 0 ]] && [[ $dry == 0 ]] # {{{
then
	verbose_ne_print $verbose "FILE CONTENTS:\n\n";
	cat $file;
elif [[ $fcat == 1 ]]
then
	if [[ $dummy == 1 ]] || [[ $dry == 1 ]]
	then
		if [[ $dummy == 1 ]]
		then
			verbose_ne_print $verbose "DUMMY CONTENTS:\n\n";
		else
			verbose_ne_print $verbose "DRY CONTENTS:\n\n";
		fi
		echo -ne "$text_to_write";
		echo -ne "\n";
	fi
fi # }}}

# get items from file using grep and sed
function echo_items() { # {{{
	echo -ne "$1" | grep "^[0-9]\+\.\s\+";
} # }}}

# if $list, not $dummy, not $dry, list items in file
# if $list, $dummy, list items in args
# if $list, $dry, list items in file and args
if [[ $list == 1 ]] && [[ $dummy == 0 ]] && [[ $dry == 0 ]] # {{{
then
	verbose_ne_print $verbose "ITEMS:\n\n"
	file_contents="$(cat $file)";
	echo_items "$file_contents"
elif [[ $list == 1 ]]
then
	verbose_ne_print $verbose "ITEMS:\n\n"
	echo_items "$text_to_write";
fi # }}}

# if $open_fin and not $dry, open file
if [[ $open_fin == 1 ]] && [[ $dry == 0 ]] # {{{
then
	$EDITOR $file;
elif [[ $open_fin == 1 ]] && [[ $dry == 1 ]]
then
	echo -ne "Cannot open file after a dry run.\n";
fi # }}}

# VIm Folding {{{
# vim:fdm=marker
# }}}

