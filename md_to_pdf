#!/bin/bash
# md_to_pdf
# converts a github-flavored-markdown file to an github-styled html page

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

grip_check="$(command -v grip)";
if [[ -z "$grip_check" ]]
then
	echo "Program \"grip\" is required.";
	echo "linux: 'pip install grip'";
	echo "MacOS: 'brew install grip'";
	echo "source: https://github.com/joeyespo/grip";
	exit;
fi

puppeteer_check="$(command -v puppeteer-pdf)";
if [[ -z "$puppeteer_check" ]]
then
	echo "Program \"puppeteer-pdf\" is required.";
	echo "npm: 'npm -i puppeteer-pdf -g'";
	echo "source: https://github.com/coletiv/puppeteer-pdf'";
	exit;
fi

input="";
getinput="0";
output="";
getoutput="0";
force="0";
debug_html="0";

for arg in "$@"
do
	if [[ "$getinput" == "0" && "$getoutput" == "0" ]]
	then
		if [[ "$arg" == "-i" || "$arg" == "--input" ]]
		then
			getinput="1";
		elif [[ "$arg" == "-o" || "$arg" == "--output" ]]
		then
			getoutput="1";
		elif [[ "$arg" == "-f" || "$arg" == "--force" ]]
		then
			force="1";
		elif [[ "$arg" == "--debug-html" ]]
		then
			debug_html="1";
		else
			echo "Unrecognized argument $arg";
			exit;
		fi
	elif [[ "$getinput" == "1" ]]
	then
		input="$arg";
		getinput="0";
	elif [[ "$getoutput" == "1" ]]
	then
		output="$arg";
		getoutput="0";
	fi
done

if [[ -z "$input" ]]
then
	echo "Missing value for input";
	exit;
fi

if [[ -z "$output" ]]
then
	echo "Missing value for output";
	exit;
fi

if [[ ! -f "$input" ]]
then
	echo "Input file does not exist."
	exit;
fi

if [[ -f "$output.html" && "$force" == "0" ]]
then
	echo "File \"$output.html\" would be overwritten then deleted.";
	exit;
fi

if [[ -f "$output.pdf" && "$force" == "0" ]]
then
	echo "File \"$output.pdf\" would be overwritten.";
	exit;
fi

html="$(grip --user="$GIT_USER" --pass="$GIT_PASS" "$input" --export -)";
html+="<style>$(<$DIR/.md_to_pdf/style.css)</style>";

# insert font awesome after head
fonta="s/<\/head>/<script src=\"https:\/\/kit.fontawesome.com\/66d3b9dbe0.js\" crossorigin=\"anonymous\"><\/script><\/head>/g";
html="$(echo "$html" | sed "$fonta")";
# handle page break
# break represented by "\pagebreak" on a line by iteself
small_open="s/\/\/small\/\//<small>/g";
small_close="s/\/\/-small\/\//<\/small>/g";
html="$(echo "$html" | sed "$small_open")";
html="$(echo "$html" | sed "$small_close")";
# handle custom small tag
# tag represented by "//small//" inline to open and "//-small//" inline to close
html=${html//"//small//"/"<small>"}
html=${html//"//-small//"/"</small>"}
# handle font-awesome tags
fas=($(echo "$html" | grep -o '//fas [a-zA-Z0-9\-]\+//'))
for ((i = 0; i < "${#fas[@]}"; i+=2))
do
	fa="${fas[$i]} ${fas[(($i+1))]}"
	len=${#fa};
	fa="$(echo ${fa:2:(($len-4))})"
	fa_end="";
	replace="s/\/\/$fa\/\//<span class=\"$fa\"><\/span>/g";
	html="$(echo "$html" | sed "$replace")";
done;

echo "$html" > "$output.html";

M="0.25in";
puppeteer-pdf \
	"$output.html" \
	--path "$output.og.pdf" \
	--marginTop="$M" \
	--marginBottom="$M" \
	--marginLeft="$M" \
	--marginRight="$M" \
	--format="Letter" \
	--printBackground;

if [[ "$debug_html" == "0" ]]
then
	rm "$output.html";
fi

# compress pdf
pdf_compress "$output.og.pdf" "$output.pdf"

# delete og
rm "$output.og.pdf";

